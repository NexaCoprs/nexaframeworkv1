"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.VulnerabilityDetector = void 0;
class VulnerabilityDetector {
    constructor() {
        this.vulnerabilityPatterns = [];
        this.initializeVulnerabilityPatterns();
    }
    async detectVulnerabilities(content, filePath) {
        const issues = [];
        const lines = content.split('\n');
        for (let i = 0; i < lines.length; i++) {
            const line = lines[i];
            const lineNumber = i + 1;
            for (const pattern of this.vulnerabilityPatterns) {
                const matches = line.match(pattern.pattern);
                if (matches) {
                    issues.push({
                        id: `${pattern.id}_${lineNumber}_${Date.now()}`,
                        type: 'vulnerability',
                        severity: pattern.severity,
                        title: pattern.name,
                        description: `${pattern.description} (CWE: ${pattern.cwe || 'N/A'})`,
                        file: filePath,
                        line: lineNumber,
                        column: line.indexOf(matches[0]),
                        rule: pattern.id,
                        fix: pattern.fix,
                        references: this.generateReferences(pattern)
                    });
                }
            }
        }
        // Detect context-based vulnerabilities
        const contextIssues = await this.detectContextualVulnerabilities(content, filePath);
        issues.push(...contextIssues);
        return issues;
    }
    async detectContextualVulnerabilities(content, filePath) {
        const issues = [];
        // Detect CSRF vulnerabilities
        const csrfIssues = this.detectCSRFVulnerabilities(content, filePath);
        issues.push(...csrfIssues);
        // Detect authentication bypass
        const authIssues = this.detectAuthenticationIssues(content, filePath);
        issues.push(...authIssues);
        // Detect insecure direct object references
        const idorIssues = this.detectIDORVulnerabilities(content, filePath);
        issues.push(...idorIssues);
        // Detect information disclosure
        const infoDisclosureIssues = this.detectInformationDisclosure(content, filePath);
        issues.push(...infoDisclosureIssues);
        return issues;
    }
    detectCSRFVulnerabilities(content, filePath) {
        const issues = [];
        const lines = content.split('\n');
        let hasCSRFProtection = false;
        let hasFormSubmission = false;
        let formLineNumber = 0;
        for (let i = 0; i < lines.length; i++) {
            const line = lines[i];
            const lineNumber = i + 1;
            // Check for CSRF token
            if (line.includes('csrf_token') || line.includes('_token') || line.includes('@csrf')) {
                hasCSRFProtection = true;
            }
            // Check for form submissions
            if (line.includes('<form') && (line.includes('method="post"') || line.includes("method='post'"))) {
                hasFormSubmission = true;
                formLineNumber = lineNumber;
            }
        }
        if (hasFormSubmission && !hasCSRFProtection) {
            issues.push({
                id: `csrf_missing_${Date.now()}`,
                type: 'vulnerability',
                severity: 'high',
                title: 'Protection CSRF manquante',
                description: 'Formulaire POST sans protection CSRF détecté',
                file: filePath,
                line: formLineNumber,
                rule: 'csrf_protection',
                fix: 'Ajoutez un token CSRF au formulaire: {{ csrf_field() }} ou @csrf',
                references: ['https://owasp.org/www-community/attacks/csrf']
            });
        }
        return issues;
    }
    detectAuthenticationIssues(content, filePath) {
        const issues = [];
        const lines = content.split('\n');
        for (let i = 0; i < lines.length; i++) {
            const line = lines[i];
            const lineNumber = i + 1;
            // Check for weak session configuration
            if (line.includes('session_start()') && !content.includes('session_regenerate_id')) {
                issues.push({
                    id: `weak_session_${lineNumber}_${Date.now()}`,
                    type: 'vulnerability',
                    severity: 'medium',
                    title: 'Configuration de session faible',
                    description: 'Session démarrée sans régénération d\'ID',
                    file: filePath,
                    line: lineNumber,
                    rule: 'weak_session',
                    fix: 'Ajoutez session_regenerate_id(true) après session_start()',
                    references: ['https://owasp.org/www-project-top-ten/2017/A2_2017-Broken_Authentication']
                });
            }
            // Check for insecure password hashing
            if (line.match(/(md5|sha1|sha256)\s*\(.*password/i)) {
                issues.push({
                    id: `weak_password_hash_${lineNumber}_${Date.now()}`,
                    type: 'vulnerability',
                    severity: 'high',
                    title: 'Hachage de mot de passe faible',
                    description: 'Utilisation d\'un algorithme de hachage faible pour les mots de passe',
                    file: filePath,
                    line: lineNumber,
                    rule: 'weak_password_hash',
                    fix: 'Utilisez password_hash() avec PASSWORD_DEFAULT ou PASSWORD_ARGON2ID',
                    references: ['https://www.php.net/manual/en/function.password-hash.php']
                });
            }
        }
        return issues;
    }
    detectIDORVulnerabilities(content, filePath) {
        const issues = [];
        const lines = content.split('\n');
        for (let i = 0; i < lines.length; i++) {
            const line = lines[i];
            const lineNumber = i + 1;
            // Check for direct object access without authorization
            const idorPattern = /\$_(GET|POST|REQUEST)\['(id|user_id|file_id|document_id)'\]/;
            if (idorPattern.test(line) && !this.hasAuthorizationCheck(content, i)) {
                issues.push({
                    id: `idor_${lineNumber}_${Date.now()}`,
                    type: 'vulnerability',
                    severity: 'high',
                    title: 'Référence d\'objet direct non sécurisée (IDOR)',
                    description: 'Accès direct à un objet sans vérification d\'autorisation',
                    file: filePath,
                    line: lineNumber,
                    rule: 'idor_vulnerability',
                    fix: 'Ajoutez une vérification d\'autorisation avant d\'accéder à l\'objet',
                    references: ['https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control']
                });
            }
        }
        return issues;
    }
    detectInformationDisclosure(content, filePath) {
        const issues = [];
        const lines = content.split('\n');
        for (let i = 0; i < lines.length; i++) {
            const line = lines[i];
            const lineNumber = i + 1;
            // Check for error information disclosure
            if (line.includes('error_reporting(E_ALL)') || line.includes('ini_set(\'display_errors\', 1)')) {
                issues.push({
                    id: `info_disclosure_${lineNumber}_${Date.now()}`,
                    type: 'vulnerability',
                    severity: 'medium',
                    title: 'Divulgation d\'informations d\'erreur',
                    description: 'Affichage des erreurs activé en production',
                    file: filePath,
                    line: lineNumber,
                    rule: 'error_disclosure',
                    fix: 'Désactivez l\'affichage des erreurs en production',
                    references: ['https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure']
                });
            }
            // Check for debug information
            if (line.includes('var_dump') || line.includes('print_r') || line.includes('var_export')) {
                issues.push({
                    id: `debug_info_${lineNumber}_${Date.now()}`,
                    type: 'vulnerability',
                    severity: 'low',
                    title: 'Information de débogage exposée',
                    description: 'Fonction de débogage qui peut exposer des informations sensibles',
                    file: filePath,
                    line: lineNumber,
                    rule: 'debug_disclosure',
                    fix: 'Supprimez les fonctions de débogage du code de production',
                    references: ['https://owasp.org/www-project-code-review-guide/']
                });
            }
        }
        return issues;
    }
    hasAuthorizationCheck(content, currentLine) {
        const lines = content.split('\n');
        const checkRange = 10; // Check 10 lines before and after
        const startLine = Math.max(0, currentLine - checkRange);
        const endLine = Math.min(lines.length - 1, currentLine + checkRange);
        for (let i = startLine; i <= endLine; i++) {
            const line = lines[i];
            if (line.includes('Auth::') ||
                line.includes('can(') ||
                line.includes('authorize(') ||
                line.includes('check_permission') ||
                line.includes('user_id') && line.includes('==')) {
                return true;
            }
        }
        return false;
    }
    initializeVulnerabilityPatterns() {
        this.vulnerabilityPatterns = [
            {
                id: 'sql_injection_concat',
                name: 'Injection SQL par concaténation',
                description: 'Requête SQL construite par concaténation de chaînes',
                pattern: /\$.*\s*\.\s*["'].*(?:SELECT|INSERT|UPDATE|DELETE|DROP|CREATE|ALTER).*["']\s*\.\s*\$/i,
                severity: 'critical',
                category: 'injection',
                cwe: 'CWE-89',
                owasp: 'A03:2021',
                fix: 'Utilisez des requêtes préparées avec des paramètres liés',
                examples: [
                    'Mauvais: $query = "SELECT * FROM users WHERE id = " . $_GET["id"];',
                    'Bon: $stmt = $pdo->prepare("SELECT * FROM users WHERE id = ?"); $stmt->execute([$_GET["id"]]);'
                ]
            },
            {
                id: 'xss_direct_output',
                name: 'Cross-Site Scripting (XSS)',
                description: 'Sortie directe de données utilisateur sans échappement',
                pattern: /echo\s+\$_(GET|POST|REQUEST|COOKIE|SESSION)\[/,
                severity: 'high',
                category: 'xss',
                cwe: 'CWE-79',
                owasp: 'A03:2021',
                fix: 'Échappez les données avec htmlspecialchars() ou utilisez un moteur de template sécurisé'
            },
            {
                id: 'command_injection_exec',
                name: 'Injection de commande',
                description: 'Exécution de commande système avec des données utilisateur non filtrées',
                pattern: /(exec|system|shell_exec|passthru|popen|proc_open)\s*\(.*\$_(GET|POST|REQUEST)/,
                severity: 'critical',
                category: 'injection',
                cwe: 'CWE-78',
                owasp: 'A03:2021',
                fix: 'Évitez l\'exécution de commandes système ou utilisez escapeshellarg()'
            },
            {
                id: 'file_inclusion_lfi',
                name: 'Inclusion de fichier local (LFI)',
                description: 'Inclusion de fichier basée sur une entrée utilisateur non validée',
                pattern: /(include|require)(_once)?\s*\(\s*\$_(GET|POST|REQUEST)/,
                severity: 'critical',
                category: 'inclusion',
                cwe: 'CWE-98',
                owasp: 'A03:2021',
                fix: 'Validez et filtrez les chemins de fichiers, utilisez une liste blanche'
            },
            {
                id: 'file_inclusion_rfi',
                name: 'Inclusion de fichier distant (RFI)',
                description: 'Inclusion de fichier distant potentielle',
                pattern: /(include|require)(_once)?\s*\(\s*["']https?:\/\//,
                severity: 'critical',
                category: 'inclusion',
                cwe: 'CWE-98',
                owasp: 'A03:2021',
                fix: 'Désactivez allow_url_include et validez toutes les inclusions'
            },
            {
                id: 'hardcoded_password',
                name: 'Mot de passe codé en dur',
                description: 'Mot de passe ou secret codé directement dans le code source',
                pattern: /(password|pwd|secret|key|token|api_key)\s*=\s*["'][^"']{8,}["']/i,
                severity: 'critical',
                category: 'authentication',
                cwe: 'CWE-798',
                owasp: 'A07:2021',
                fix: 'Utilisez des variables d\'environnement ou un gestionnaire de secrets'
            },
            {
                id: 'weak_crypto_md5',
                name: 'Cryptographie faible - MD5',
                description: 'Utilisation de l\'algorithme MD5 qui est cryptographiquement faible',
                pattern: /\bmd5\s*\(/i,
                severity: 'medium',
                category: 'cryptography',
                cwe: 'CWE-327',
                owasp: 'A02:2021',
                fix: 'Utilisez des algorithmes cryptographiques forts comme SHA-256 ou bcrypt'
            },
            {
                id: 'weak_crypto_sha1',
                name: 'Cryptographie faible - SHA1',
                description: 'Utilisation de l\'algorithme SHA1 qui est cryptographiquement faible',
                pattern: /\bsha1\s*\(/i,
                severity: 'medium',
                category: 'cryptography',
                cwe: 'CWE-327',
                owasp: 'A02:2021',
                fix: 'Utilisez des algorithmes cryptographiques forts comme SHA-256 ou bcrypt'
            },
            {
                id: 'insecure_random',
                name: 'Générateur de nombres aléatoires non sécurisé',
                description: 'Utilisation de rand() ou mt_rand() pour des données sensibles',
                pattern: /\b(rand|mt_rand|srand|mt_srand)\s*\(/,
                severity: 'medium',
                category: 'cryptography',
                cwe: 'CWE-338',
                owasp: 'A02:2021',
                fix: 'Utilisez random_bytes() ou random_int() pour des données cryptographiques'
            },
            {
                id: 'path_traversal',
                name: 'Traversée de répertoire',
                description: 'Accès à des fichiers via traversée de répertoire',
                pattern: /\$_(GET|POST|REQUEST).*\.\.[\/\\]/,
                severity: 'high',
                category: 'path_traversal',
                cwe: 'CWE-22',
                owasp: 'A01:2021',
                fix: 'Validez et normalisez les chemins de fichiers, utilisez realpath()'
            },
            {
                id: 'deserialization',
                name: 'Désérialisation non sécurisée',
                description: 'Désérialisation de données utilisateur non fiables',
                pattern: /unserialize\s*\(\s*\$_(GET|POST|REQUEST|COOKIE)/,
                severity: 'critical',
                category: 'deserialization',
                cwe: 'CWE-502',
                owasp: 'A08:2021',
                fix: 'Évitez unserialize() avec des données utilisateur, utilisez JSON'
            },
            {
                id: 'eval_injection',
                name: 'Injection de code via eval()',
                description: 'Utilisation d\'eval() avec des données utilisateur',
                pattern: /eval\s*\(.*\$_(GET|POST|REQUEST)/,
                severity: 'critical',
                category: 'injection',
                cwe: 'CWE-95',
                owasp: 'A03:2021',
                fix: 'Évitez eval() complètement, utilisez des alternatives sécurisées'
            },
            {
                id: 'open_redirect',
                name: 'Redirection ouverte',
                description: 'Redirection vers une URL contrôlée par l\'utilisateur',
                pattern: /(header\s*\(\s*["']Location:|Location:\s*).*\$_(GET|POST|REQUEST)/,
                severity: 'medium',
                category: 'redirect',
                cwe: 'CWE-601',
                owasp: 'A01:2021',
                fix: 'Validez les URLs de redirection avec une liste blanche'
            },
            {
                id: 'ldap_injection',
                name: 'Injection LDAP',
                description: 'Requête LDAP construite avec des données utilisateur non filtrées',
                pattern: /ldap_search\s*\(.*\$_(GET|POST|REQUEST)/,
                severity: 'high',
                category: 'injection',
                cwe: 'CWE-90',
                owasp: 'A03:2021',
                fix: 'Échappez les caractères spéciaux LDAP dans les entrées utilisateur'
            },
            {
                id: 'xpath_injection',
                name: 'Injection XPath',
                description: 'Requête XPath construite avec des données utilisateur non filtrées',
                pattern: /xpath\s*\(.*\$_(GET|POST|REQUEST)/,
                severity: 'high',
                category: 'injection',
                cwe: 'CWE-91',
                owasp: 'A03:2021',
                fix: 'Utilisez des requêtes XPath paramétrées ou échappez les entrées'
            }
        ];
    }
    generateReferences(pattern) {
        const references = [];
        if (pattern.cwe) {
            references.push(`https://cwe.mitre.org/data/definitions/${pattern.cwe.replace('CWE-', '')}.html`);
        }
        if (pattern.owasp) {
            references.push('https://owasp.org/www-project-top-ten/');
        }
        // Add category-specific references
        switch (pattern.category) {
            case 'injection':
                references.push('https://owasp.org/www-community/Injection_Flaws');
                break;
            case 'xss':
                references.push('https://owasp.org/www-community/attacks/xss/');
                break;
            case 'cryptography':
                references.push('https://owasp.org/www-project-cryptographic-storage-cheat-sheet/');
                break;
            case 'authentication':
                references.push('https://owasp.org/www-project-authentication-cheat-sheet/');
                break;
        }
        return references;
    }
    getVulnerabilityPatterns() {
        return this.vulnerabilityPatterns;
    }
    addCustomPattern(pattern) {
        this.vulnerabilityPatterns.push(pattern);
    }
    removePattern(patternId) {
        const index = this.vulnerabilityPatterns.findIndex(p => p.id === patternId);
        if (index !== -1) {
            this.vulnerabilityPatterns.splice(index, 1);
            return true;
        }
        return false;
    }
    updatePattern(patternId, updates) {
        const pattern = this.vulnerabilityPatterns.find(p => p.id === patternId);
        if (pattern) {
            Object.assign(pattern, updates);
            return true;
        }
        return false;
    }
}
exports.VulnerabilityDetector = VulnerabilityDetector;
//# sourceMappingURL=vulnerabilityDetector.js.map